import Airtable, { FieldSet, Records } from 'airtable';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

import { SongFileSchema } from '../lib/schemas/songs';

const outputDir = path.join(__dirname, '..');
const songFilePath = path.join(outputDir, 'songs.ts');

const fileHeader = /* ts */ `// Do not edit. This file was generated by scripts/update-songs.ts

import { SongFile } from '@/lib/schemas/songs';

const songs: SongFile = `;

const fileFooter = /* ts */ `

export default songs`;

console.log('üéµ Fetching songs...');

// load .env file
dotenv.config();

// get ready!
const base = new Airtable({ apiKey: process.env.AIRTABLE_TOKEN }).base('appW24b09D9VHYHfi');

// get set!
async function getSongs() {
  return await base('Songs')
    .select({
      view: 'Grid view',
      fields: [
        'Name',
        'Lyrics',
        'Videos',
        'Audio',
        'PDFs',
        'Tags',
        'Sources',
        'Recommended Key',
        'Music Author',
        'Text Author',
        'LT Description',
        'EN Description',
      ],
      sort: [{ field: 'Name', direction: 'asc' }],
    })
    .all();
}
async function getLyrics() {
  return await base('Lyrics & Chords')
    .select({
      view: 'Grid view',
      fields: ['Variant Name', 'Lyrics & Chords', 'Show Chords'],
    })
    .all();
}
async function getVideos() {
  return await base('Videos')
    .select({
      view: 'Grid view',
      fields: ['Variant Name', 'YouTube Link'],
    })
    .all();
}
// todo: mirror to r2 storage
async function getAudio() {
  return await base('Audio')
    .select({
      view: 'Grid view',
      fields: ['Variant Name', 'File'],
    })
    .all();
}
// todo: mirror to r2 storage
async function getPDFs() {
  return await base('PDFs')
    .select({
      view: 'Grid view',
      fields: ['Variant Name', 'File'],
    })
    .all();
}
function getRecordsForField(field: FieldSet[string], records: Records<FieldSet>): FieldSet[string] | FieldSet[] {
  if (!Array.isArray(field)) return field;

  return field
    .map((id) => {
      if (typeof id !== 'string') return null;
      const record = records.find((record) => record.id === id);
      if (!record) return null;
      return record.fields;
    })
    .filter((r) => r !== null);
}

// get those songs
async function updateSongs() {
  try {
    const [songs, lyrics, videos, audio, pdfs] = await Promise.all([
      getSongs(),
      getLyrics(),
      getVideos(),
      getAudio(),
      getPDFs(),
    ]);

    const songFile = songs.map((song) => ({
      id: song.id,
      fields: {
        ...song.fields,
        Lyrics: getRecordsForField(song.fields.Lyrics, lyrics),
        Videos: getRecordsForField(song.fields.Videos, videos),
        Audio: getRecordsForField(song.fields.Audio, audio),
        PDFs: getRecordsForField(song.fields.PDFs, pdfs),
      },
    }));
    const validSongFile = SongFileSchema.parse(songFile);

    // Write the song file
    fs.writeFileSync(songFilePath, fileHeader + JSON.stringify(validSongFile, null, 2) + fileFooter);
    console.log('‚úÖ Songs fetched and saved to songs.ts');
  } catch (e) {
    console.error('‚ùå Error fetching songs.', e);
    console.log('\n‚ÑπÔ∏è  Falling back to saved songs');
  }
}

updateSongs();
