import Airtable, { FieldSet, Records } from 'airtable';
import dotenv from 'dotenv';
import fs from 'fs';
import Fuse from 'fuse.js';
import path from 'path';
import removeMd from 'remove-markdown';

import { Song, SongFile, SongFileSchema } from '../lib/schemas/songs';

const fieldFlags: Record<keyof Song['fields'], boolean> = {
  Name: true,
  Lyrics: true,
  Videos: false,
  Audio: true,
  PDFs: true,
  Translations: true,
  Tags: false,
  Sources: false,
  'Recommended Key': false,
  'Music Author': true,
  'Text Author': true,
  'LT Description': true,
  'EN Description': true,
  'AI-Generated Description': true,
} as const;

const outputDir = path.join(__dirname, '..');
const songFilePath = path.join(outputDir, 'songs.ts');
const titleIndexFilePath = path.join(outputDir, 'title-index.json');
const lyricIndexFilePath = path.join(outputDir, 'lyric-index.json');

const fileHeader = /* ts */ `// Do not edit. This file was generated by scripts/update-songs.ts

import { SongFile } from '@/lib/schemas/songs';

const songs: SongFile = `;

const fileFooter = /* ts */ `

export default songs`;

console.log('üéµ Fetching songs...');

// load .env file
dotenv.config();

// get ready!
const base = new Airtable({ apiKey: process.env.AIRTABLE_TOKEN }).base('appW24b09D9VHYHfi');

// get set!
async function getSongs() {
  return await base('Songs')
    .select({
      view: 'Grid view',
      fields: [
        'Name',
        'Lyrics',
        'Videos',
        'Audio',
        'PDFs',
        'Translations',
        'Tags',
        'Sources',
        'Recommended Key',
        'Music Author',
        'Text Author',
        'LT Description',
        'EN Description',
        'AI-Generated Description',
      ],
      sort: [{ field: 'Name', direction: 'asc' }],
      filterByFormula: 'NOT(Hide)',
    })
    .all();
}
async function getLyrics() {
  return await base('Lyrics & Chords')
    .select({
      view: 'Grid view',
      fields: ['Variant Name', 'EN Variant Name', 'Lyrics & Chords', 'Show Chords', 'Notes'],
    })
    .all();
}
async function getVideos() {
  return await base('Videos')
    .select({
      view: 'Grid view',
      fields: ['Variant Name', 'EN Variant Name', 'YouTube Link'],
    })
    .all();
}
async function getAudio() {
  return await base('Audio')
    .select({
      view: 'Grid view',
      fields: ['Variant Name', 'EN Variant Name', 'URL', 'Album', 'Artist'],
    })
    .all();
}
async function getPDFs() {
  return await base('PDFs')
    .select({
      view: 'Grid view',
      fields: ['Variant Name', 'EN Variant Name', 'URL'],
    })
    .all();
}
async function getTranslations() {
  return await base('Translations')
    .select({
      view: 'Grid view',
      fields: ['Title', 'Variant Name', 'EN Variant Name', 'Lyrics', 'AI Generated', 'Notes'],
    })
    .all();
}

function getRecordsForField(field: undefined | any[], records: Records<FieldSet>): { [id: string]: FieldSet } {
  if (!field) return {};
  return Object.fromEntries(
    field
      .map((id) => {
        if (typeof id !== 'string') return null;
        const record = records.find((record) => record.id === id);
        if (!record) return null;
        return [record.id, record.fields];
      })
      .filter((entry) => entry !== null)
  );
}

/**
 * When `Variant Name` is not defined, we default to `${defaultName} ${idx + 1}`
 * When `EN Variant Name` is not defined, we default to `Variant Name`
 */
function assignVariantNames(records: { [id: string]: FieldSet }, defaultLtName: string, defaultEnName: string) {
  const numberOfMissingVariantNames = Object.values(records).filter((record) => !record['Variant Name']).length;
  const shouldAppendIndexNumber = numberOfMissingVariantNames > 1;

  Object.entries(records).forEach(([id, record], idx) => {
    const alreadyHasName = !!record['Variant Name'];
    let ltName = alreadyHasName ? record['Variant Name'] : defaultLtName;
    let enName = alreadyHasName ? (record['EN Variant Name'] ?? record['Variant Name']) : defaultEnName;
    if (shouldAppendIndexNumber && !alreadyHasName) {
      ltName += ` ${idx + 1}`;
      enName += ` ${idx + 1}`;
    }
    records[id] = {
      ...record,
      'Variant Name': ltName,
      'EN Variant Name': enName,
    };
  });

  return records;
}

/**
 * Throughout lyrics, the pattern [space](Chord) is frequently used
 * Since that's often not enough space, we do a lil magic to fix it up a bit
 * Based on the number of wide characters in the chord, we add that many em spaces (Max 4)
 * E.g., [space](C) => [emspace](C)
 *       [space](C#) => [emspace emspace](C#)
 *       [space](C/D) => [emspace emspace](C/D)
 *       [space](C#maj7) => [emspace emspace emspace ](C#maj7)
 */
function adjustChordWhitespace(lyrics: { [id: string]: FieldSet }): { [id: string]: FieldSet } {
  const emSpace = '‚ÄÉ';
  const wideCharRegex = /[a-zA-Z0-9#]/g; // Only count alphanumeric and "#" as wide characters
  Object.entries(lyrics).forEach(([id, record]) => {
    const lyricsText = record['Lyrics & Chords'];
    if (typeof lyricsText !== 'string') return record;

    const adjustedLyrics = lyricsText.replace(/\[\s*\]\(([^\)]+)\)/g, (match, chord) => {
      // Count wide characters in the chord
      const wideCount = (chord.match(wideCharRegex) || []).length;
      const emSpaces = emSpace.repeat(Math.min(3, wideCount));
      return `[${emSpaces}](${chord})`;
    });

    lyrics[id] = {
      ...record,
      'Lyrics & Chords': adjustedLyrics,
    };
  });
  return lyrics;
}

// get those songs
async function updateSongs() {
  try {
    const [songs, lyrics, videos, audio, pdfs, translations] = await Promise.all([
      getSongs(),
      getLyrics(),
      getVideos(),
      getAudio(),
      getPDFs(),
      getTranslations(),
    ]);

    const songFile = songs.map((song) => {
      const Lyrics = adjustChordWhitespace(
        assignVariantNames(getRecordsForField(song.fields.Lyrics as undefined | any[], lyrics), '≈Ωod≈æiai', 'Lyrics')
      );
      const PDFs = assignVariantNames(
        getRecordsForField(song.fields.PDFs as undefined | any[], pdfs),
        'Natos',
        'Score'
      );
      const Audio = assignVariantNames(
        getRecordsForField(song.fields.Audio as undefined | any[], audio),
        'ƒÆra≈°as',
        'Recording'
      );
      const Videos = assignVariantNames(
        getRecordsForField(song.fields.Videos as undefined | any[], videos),
        'ƒÆra≈°as',
        'Recording'
      );
      const Translations = assignVariantNames(
        getRecordsForField(song.fields.Translations as undefined | any[], translations),
        'Vertimas',
        'Translation'
      );

      return {
        id: song.id,
        fields: {
          ...song.fields,
          Lyrics,
          Videos,
          Audio,
          PDFs,
          Translations,
        },
      };
    });
    const validSongFile = SongFileSchema.parse(songFile);
    const filteredSongFile = validSongFile.map((song) => {
      return {
        id: song.id,
        fields: Object.fromEntries(
          Object.entries(song.fields).filter(([key]) => fieldFlags[key as keyof Song['fields']])
        ),
      };
    }) as SongFile;

    // Write the song file
    fs.writeFileSync(songFilePath, fileHeader + JSON.stringify(filteredSongFile, null, 2) + fileFooter);
    console.log('‚úÖ Songs fetched and saved to songs.ts');
    console.log(
      Object.entries(fieldFlags)
        .map(([key, value]) => `  - ${value ? 'Enabled  ' : 'Disabled '} ${key}`)
        .join('\n')
    );

    // create search index
    const filteredSongFileWithoutMarkdown = filteredSongFile.map((song) => ({
      ...song,
      fields: {
        ...song.fields,
        Lyrics: Object.fromEntries(
          Object.entries(song.fields.Lyrics).map(([id, variant]) => [
            id,
            {
              ...variant,
              'Lyrics & Chords': removeMd(variant['Lyrics & Chords']),
            },
          ])
        ),
      },
    }));

    const titleIndex = Fuse.createIndex([{ name: 'name', getFn: (s) => s.fields.Name }], filteredSongFile);
    const lyricIndex = Fuse.createIndex([['fields', 'Lyrics', 'Lyrics & Chords']], filteredSongFileWithoutMarkdown);
    fs.writeFileSync(titleIndexFilePath, JSON.stringify(titleIndex));
    fs.writeFileSync(lyricIndexFilePath, JSON.stringify(lyricIndex));
    console.log('‚úÖ Search indices created and saved to title-index.json and lyric-index.json');
  } catch (e) {
    console.error('‚ùå Error fetching & indexing songs.', e);
    console.log('\n‚ÑπÔ∏è  Falling back to saved songs');
  }
}

updateSongs();
